{
  "hash": "e6303369d528f2cd2edc7be0e5ee6473",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01b - Thematic Mapping and GeoVisualisation with R\"\nauthor: \"Cathy C.\"\ndate: \"Aug 29, 2025\"\ndate-modified: \"last-modified\" #auto render date\nformat: html\nexecute: #how YML page work\n  echo: true #will show code\n  eval: true #will run code every time and show output\n  warning: false #dont show warning msg\n  freeze: true #controls rendering - no render if no changes\n---\n\n\n\n## Hands-on 01b Overview\n\n## **2.1 Objectives**\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, five other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n-   [**rvest**](https://rvest.tidyverse.org/) for scraping (or harvesting) data from web pages.\n\nAmong the five packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\n## **2.2 Getting started**\n\nThe code chunk below will be used to install and load these packages in RStudio. We don't have to install **readr**, **tidyr** and **dplyr** individually.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, rvest)\n```\n:::\n\n\n\n## **2.3 Importing Data into R**\n\n### **2.3.1 The Data**\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   Master Plan 2019 Subzone Boundary (No Sea) (KML) can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2019.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2024 in csv format (i.e. `respopagesextod2024.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/). Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to georeference to Master Plan 2019 Subzone Boundary.\n\n### **2.3.2 Importing Geospatial Data into R**\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/cathyc/Documents/cathyschu/ISSS626GEO/Hands-on_Ex/Hands-on_Ex01/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n#### 2.3.2.1 Tidying data\n\nFunction to extract values from the HTML description\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_kml_field <- function(html_text, field_name) {\n  if (is.na(html_text) || html_text == \"\") return(NA_character_)\n  \n  page <- read_html(html_text)\n  rows <- page %>% html_elements(\"tr\")\n  \n  value <- rows %>%\n    keep(~ html_text2(html_element(.x, \"th\")) == field_name) %>%\n    html_element(\"td\") %>%\n    html_text2()\n  \n  if (length(value) == 0) NA_character_ else value\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  mutate(\n    REGION_N = map_chr(Description, extract_kml_field, \"REGION_N\"),\n    PLN_AREA_N = map_chr(Description, extract_kml_field, \"PLN_AREA_N\"),\n    SUBZONE_N = map_chr(Description, extract_kml_field, \"SUBZONE_N\"),\n    SUBZONE_C = map_chr(Description, extract_kml_field, \"SUBZONE_C\")\n  ) %>%\n  select(-Name, -Description) %>%\n  relocate(geometry, .after = last_col())\n```\n:::\n\n\n\nWe can examine the content of `mpsz` by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 332 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 10 features:\n         REGION_N    PLN_AREA_N           SUBZONE_N SUBZONE_C\n1  CENTRAL REGION   BUKIT MERAH          DEPOT ROAD    BMSZ12\n2  CENTRAL REGION   BUKIT MERAH         BUKIT MERAH    BMSZ02\n3  CENTRAL REGION        OUTRAM           CHINATOWN    OTSZ03\n4  CENTRAL REGION DOWNTOWN CORE             PHILLIP    DTSZ04\n5  CENTRAL REGION DOWNTOWN CORE       RAFFLES PLACE    DTSZ05\n6  CENTRAL REGION        OUTRAM        CHINA SQUARE    OTSZ04\n7  CENTRAL REGION   BUKIT MERAH         TIONG BAHRU    BMSZ10\n8  CENTRAL REGION DOWNTOWN CORE    BAYFRONT SUBZONE    DTSZ12\n9  CENTRAL REGION   BUKIT MERAH TIONG BAHRU STATION    BMSZ04\n10 CENTRAL REGION DOWNTOWN CORE       CLIFFORD PIER    DTSZ06\n                         geometry\n1  MULTIPOLYGON Z (((103.8145 ...\n2  MULTIPOLYGON Z (((103.8221 ...\n3  MULTIPOLYGON Z (((103.8438 ...\n4  MULTIPOLYGON Z (((103.8496 ...\n5  MULTIPOLYGON Z (((103.8525 ...\n6  MULTIPOLYGON Z (((103.8486 ...\n7  MULTIPOLYGON Z (((103.8311 ...\n8  MULTIPOLYGON Z (((103.8589 ...\n9  MULTIPOLYGON Z (((103.8283 ...\n10 MULTIPOLYGON Z (((103.8552 ...\n```\n\n\n:::\n:::\n\n\n\nLearning:\n\nOnly the first 10 records are displayedby default to avoid overwhelming the console, especially with large datasets.\n\n### **2.3.3 Importing Attribute Data into R**\n\nNext, we will import *respopagesextod2024.csv* file into RStudio and save the file into an tibble dataframe called *popdata*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2024.csv\")\n```\n:::\n\n\n\n### **2.3.4 Data Preparation**\n\nBefore a thematic map can be prepared, we need to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### 2.3.4.1 Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package, and\n\n-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2024 <- popdata %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\n  \nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n\n#### 2.3.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to **uppercase.** This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2024 <- popdata2024 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2024 <- left_join(mpsz, popdata2024,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n\nLearning:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a **simple features data frame.**\n\n`mpsz_pop2024` is written in a rsd file, shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2024, \"data/rds/mpsz_pop2024.rds\")\n```\n:::\n\n\n\n## **2.4 Choropleth Mapping Geospatial Data Using tmap**\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nTwo approaches can be used to prepare thematic map using *tmap*, they are:\n\n-   Plotting a thematic map quickly by using ***qtm()*****.**\n\n-   Plotting highly customisable thematic map by using **tmap** elements.\n\n### **2.4.1 Plotting a choropleth map quickly by using *qtm()***\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using ***qtm()***. It is concise and provides a good default visualisation in many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(shp = mpsz_pop2024, fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n-   *fill* argument is used to map the attribute (i.e.DEPENDENCY)\n\n### **2.4.2 Creating a choropleth map by using *tmap*’s elements**\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**’s drawing elements should be used.\n\n\n\n::: {.cell fig-bg='transparent'}\n\n```{.r .cell-code}\npar(bg = \"lightblue\")\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE,\n            bg.color = \"lightblue\",\n            outer.bg.color = \"lightblue\") +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.4.2.1 Drawing a base map\n\n#### 2.4.2.2 Drawing a choropleth map using `tm_polygons()`\n\n#### 2.4.2.3 Drawing a choropleth map using *tm_fill()* and \\*tm_border()\\*\\*\n\n### **2.4.3 Data classification methods of tmap**\n\n#### 2.4.3.1 Plotting choropleth maps with built-in classification methods\n\n#### 2.4.3.2 Plotting choropleth map with custome break\n\n### **2.4.4 Colour Scheme**\n\n#### 2.4.4.1 Using ColourBrewer palette\n\n#### 2.4.4.2 Cartographic Furniture\n\n### **2.4.5 Map Layout**\n\n#### 2.4.5.1 Map Legend\n\n#### 2.4.5.2 Map style\n\n## **2.5 Drawing Small Multiple Choropleth Maps**\n\n### **2.5.1 By assigning multiple values to at least one of the aesthetic arguments**\n\n### **2.5.2 By arrange multiples choropleth maps in a grid layout**\n\n### **2.5.3 By defining a group-by variable in *tm_facets()***\n\n## **2.6 Mapping Spatial Object Meeting a Selection Criterion**\n\n## **2.7 Complementing Thematic Map with Statistical Chart**\n\n## **2.8 Creating Interactive Map**\n\n## **2.9 Reference**\n",
    "supporting": [
      "Hands-on_Ex01b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}